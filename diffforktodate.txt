diff --git a/Example/CodeEditSourceEditorExample/CodeEditSourceEditorExample.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved b/Example/CodeEditSourceEditorExample/CodeEditSourceEditorExample.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
index a7d1aaa..afaca9f 100644
--- a/Example/CodeEditSourceEditorExample/CodeEditSourceEditorExample.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
+++ b/Example/CodeEditSourceEditorExample/CodeEditSourceEditorExample.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
@@ -9,6 +9,15 @@
         "version" : "0.1.20"
       }
     },
+    {
+      "identity" : "codeedittextview",
+      "kind" : "remoteSourceControl",
+      "location" : "https://github.com/CodeEditApp/CodeEditTextView.git",
+      "state" : {
+        "revision" : "1792167c751b6668b4743600d2cf73d2829dd18a",
+        "version" : "0.7.9"
+      }
+    },
     {
       "identity" : "rearrange",
       "kind" : "remoteSourceControl",
diff --git a/Sources/CodeEditSourceEditor/CodeEditSourceEditor/CodeEditSourceEditor+Coordinator.swift b/Sources/CodeEditSourceEditor/CodeEditSourceEditor/CodeEditSourceEditor+Coordinator.swift
index 3f17918..b772167 100644
--- a/Sources/CodeEditSourceEditor/CodeEditSourceEditor/CodeEditSourceEditor+Coordinator.swift
+++ b/Sources/CodeEditSourceEditor/CodeEditSourceEditor/CodeEditSourceEditor+Coordinator.swift
@@ -45,7 +45,9 @@ extension CodeEditSourceEditor {
                 return
             }
             if case .binding(let binding) = text {
-                binding.wrappedValue = textView.string
+                Task { DispatchQueue.main.async {
+                    binding.wrappedValue = textView.string
+                } }
             }
         }
 
diff --git a/Sources/CodeEditSourceEditor/Controller/TextViewController+LoadView.swift b/Sources/CodeEditSourceEditor/Controller/TextViewController+LoadView.swift
index 34eb0dd..049bda6 100644
--- a/Sources/CodeEditSourceEditor/Controller/TextViewController+LoadView.swift
+++ b/Sources/CodeEditSourceEditor/Controller/TextViewController+LoadView.swift
@@ -29,10 +29,13 @@ extension TextViewController {
             delegate: self
         )
         gutterView.updateWidthIfNeeded()
-        scrollView.addFloatingSubview(
-            gutterView,
-            for: .horizontal
-        )
+        
+        // gutterWidth = 0, hard coded, to support use of editor for text fields or areas in forms; no parameterization yet
+// not adding gutter overlay, to support use of editor for text fields or areas in forms, no parameterization yet.
+//        scrollView.addFloatingSubview(
+//            gutterView,
+//            for: .horizontal
+//        )
 
         self.view = scrollView
         if let _undoManager {
diff --git a/Sources/CodeEditSourceEditor/Controller/TextViewController+TextViewDelegate.swift b/Sources/CodeEditSourceEditor/Controller/TextViewController+TextViewDelegate.swift
index ec5f824..ee94477 100644
--- a/Sources/CodeEditSourceEditor/Controller/TextViewController+TextViewDelegate.swift
+++ b/Sources/CodeEditSourceEditor/Controller/TextViewController+TextViewDelegate.swift
@@ -18,7 +18,7 @@ extension TextViewController: TextViewDelegate {
         }
     }
 
-    public func textView(_ textView: TextView, didReplaceContentsIn range: NSRange, with: String) {
+    public func textView(_ textView: TextView, didReplaceContentsIn range: NSRange, with string: String) {
         gutterView.needsDisplay = true
         for coordinator in self.textCoordinators.values() {
             if let coordinator = coordinator as? TextViewDelegate {
diff --git a/Sources/CodeEditSourceEditor/Gutter/GutterView.swift b/Sources/CodeEditSourceEditor/Gutter/GutterView.swift
index 31568d4..da5dbdb 100644
--- a/Sources/CodeEditSourceEditor/Gutter/GutterView.swift
+++ b/Sources/CodeEditSourceEditor/Gutter/GutterView.swift
@@ -138,6 +138,9 @@ public class GutterView: NSView {
             gutterWidth = maxWidth + edgeInsets.horizontal
             delegate?.gutterViewWidthDidUpdate(newWidth: maxWidth + edgeInsets.horizontal)
         }
+        
+        // gutterWidth = 0, hard coded, to support use of editor for text fields or areas in forms; no parameterization yet
+        gutterWidth = 0
     }
 
     private func drawBackground(_ context: CGContext) {
diff --git a/Sources/CodeEditSourceEditor/Highlighting/Highlighter.swift b/Sources/CodeEditSourceEditor/Highlighting/Highlighter.swift
index d10610a..b8f100e 100644
--- a/Sources/CodeEditSourceEditor/Highlighting/Highlighter.swift
+++ b/Sources/CodeEditSourceEditor/Highlighting/Highlighter.swift
@@ -276,12 +276,19 @@ extension Highlighter: StyledRangeContainerDelegate {
             guard let range = NSRange(location: offset, length: run.length).intersection(range) else {
                 continue
             }
+            //debug 2503081830 workaround for crash using editor for suggesting text field
+            guard range.upperBound <= storage?.length ?? 0 else { continue }
             storage?.setAttributes(attributeProvider.attributesFor(run.capture), range: range)
             offset += range.length
         }
 
         textView.textStorage.endEditing()
         textView.layoutManager.endTransaction()
+        
+        //debug 2503060948 bug workaround elsewhere causes infiniteloop throu invalidation
+        guard !textView.textStorage.string.isEmpty else { return }
+        
+        
         textView.layoutManager.invalidateLayoutForRange(range)
     }
 }
diff --git a/Sources/CodeEditSourceEditor/Highlighting/StyledRangeContainer/StyledRangeStore/StyledRangeStore.swift b/Sources/CodeEditSourceEditor/Highlighting/StyledRangeContainer/StyledRangeStore/StyledRangeStore.swift
index 98d5bea..0a6b314 100644
--- a/Sources/CodeEditSourceEditor/Highlighting/StyledRangeContainer/StyledRangeStore/StyledRangeStore.swift
+++ b/Sources/CodeEditSourceEditor/Highlighting/StyledRangeContainer/StyledRangeStore/StyledRangeStore.swift
@@ -35,6 +35,17 @@ final class StyledRangeStore {
     /// - Parameter range: The range to query.
     /// - Returns: A continuous array of runs representing the queried range.
     func runs(in range: Range<Int>) -> [Run] {
+        
+        //debug 2503041713 assertion failed. Trying a workaround:
+        var range = range // in; mutable for possible adjustment
+        if range.upperBound > _guts.count(in: OffsetMetric()) { // upperBound outside valid range
+            let existingLength = range.length
+//            range.length = _guts.count(in: OffsetMetric())
+            let overshoot = existingLength - _guts.count(in: OffsetMetric())
+            let newRange = Range<Int>(lowerBound: range.lowerBound, length: existingLength - overshoot)
+            range = newRange
+        }
+
         assert(range.lowerBound >= 0, "Negative lowerBound")
         assert(range.upperBound <= _guts.count(in: OffsetMetric()), "upperBound outside valid range")
         if let cache, cache.range == range {
@@ -73,6 +84,16 @@ final class StyledRangeStore {
     ///   - runs: The runs to insert.
     ///   - range: The range to replace.
     func set(runs: [Run], for range: Range<Int>) {
+        
+        // debug 2503041126 Rope utility has a bug--the following trips:
+//        precondition(
+//          bounds.lowerBound >= 0 && bounds.upperBound <= size,
+//          "Range out of bounds")
+        // this may be a workaround
+        guard range.lowerBound >= 0 && range.upperBound <= OffsetMetric().size(of: _guts.summary) else {
+            return
+        }
+        
         _guts.replaceSubrange(
             range,
             in: OffsetMetric(),
